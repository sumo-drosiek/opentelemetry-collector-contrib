receivers:
  filelog:
    include: [ /tmp/namespace-892813399_test-pod_000011112222333344445555666677778888/386885066/071960225.log ]
    start_at: beginning
    include_file_path: true
    include_file_name: false
    operators:
      # Find out which format is used by kubernetes
      - type: router
        id: get-format
        routes:
          - output: parser-docker
            expr: '$$record matches "^\\{"'
          - output: parser-crio
            expr: '$$record matches "^[^ Z]+ "'
          - output: parser-containerd
            expr: '$$record matches "^[^ Z]+Z"'
      # Parse CRI-O format
      - type: regex_parser
        id: parser-crio
        regex: '^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) (?P<log>.*)$'
        output: clean-up-log-record
        timestamp:
          parse_from: time
          layout_type: gotime
          layout: '2006-01-02T15:04:05.000000000-07:00'
      # Parse CRI-Containerd format
      - type: regex_parser
        id: parser-containerd
        regex: '^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) (?P<log>.*)$'
        output: clean-up-log-record
        timestamp:
          parse_from: time
          layout: '%Y-%m-%dT%H:%M:%S.%LZ'
      # Parse Docker format
      - type: json_parser
        id: parser-docker
        output: clean-up-log-record
        timestamp:
          parse_from: time
          layout: '%Y-%m-%dT%H:%M:%S.%LZ'
      # Dummy output
      - type: restructure
        id: clean-up-log-record
        ops: []
  journald:
    operators:
      # Filter in only related units
      - type: filter
        id: filter
        expr: >-
          ($$record._SYSTEMD_UNIT != "addon-config.service") &&
          ($$record._SYSTEMD_UNIT != "addon-run.service") &&
          ($$record._SYSTEMD_UNIT != "cfn-etcd-environment.service") &&
          ($$record._SYSTEMD_UNIT != "cfn-signal.service") &&
          ($$record._SYSTEMD_UNIT != "clean-ca-certificates.service") &&
          ($$record._SYSTEMD_UNIT != "containerd.service") &&
          ($$record._SYSTEMD_UNIT != "coreos-metadata.service") &&
          ($$record._SYSTEMD_UNIT != "coreos-setup-environment.service") &&
          ($$record._SYSTEMD_UNIT != "coreos-tmpfiles.service") &&
          ($$record._SYSTEMD_UNIT != "dbus.service") &&
          ($$record._SYSTEMD_UNIT != "docker.service") &&
          ($$record._SYSTEMD_UNIT != "efs.service") &&
          ($$record._SYSTEMD_UNIT != "etcd-member.service") &&
          ($$record._SYSTEMD_UNIT != "etcd.service") &&
          ($$record._SYSTEMD_UNIT != "etcd2.service") &&
          ($$record._SYSTEMD_UNIT != "etcd3.service") &&
          ($$record._SYSTEMD_UNIT != "etcdadm-check.service") &&
          ($$record._SYSTEMD_UNIT != "etcdadm-reconfigure.service") &&
          ($$record._SYSTEMD_UNIT != "etcdadm-save.service") &&
          ($$record._SYSTEMD_UNIT != "etcdadm-update-status.service") &&
          ($$record._SYSTEMD_UNIT != "flanneld.service") &&
          ($$record._SYSTEMD_UNIT != "format-etcd2-volume.service") &&
          ($$record._SYSTEMD_UNIT != "kube-node-taint-and-uncordon.service") &&
          ($$record._SYSTEMD_UNIT != "kubelet.service") &&
          ($$record._SYSTEMD_UNIT != "ldconfig.service") &&
          ($$record._SYSTEMD_UNIT != "locksmithd.service") &&
          ($$record._SYSTEMD_UNIT != "logrotate.service") &&
          ($$record._SYSTEMD_UNIT != "lvm2-monitor.service") &&
          ($$record._SYSTEMD_UNIT != "mdmon.service") &&
          ($$record._SYSTEMD_UNIT != "nfs-idmapd.service") &&
          ($$record._SYSTEMD_UNIT != "nfs-mountd.service") &&
          ($$record._SYSTEMD_UNIT != "nfs-server.service") &&
          ($$record._SYSTEMD_UNIT != "nfs-utils.service") &&
          ($$record._SYSTEMD_UNIT != "node-problem-detector.service") &&
          ($$record._SYSTEMD_UNIT != "ntp.service") &&
          ($$record._SYSTEMD_UNIT != "oem-cloudinit.service") &&
          ($$record._SYSTEMD_UNIT != "rkt-gc.service") &&
          ($$record._SYSTEMD_UNIT != "rkt-metadata.service") &&
          ($$record._SYSTEMD_UNIT != "rpc-idmapd.service") &&
          ($$record._SYSTEMD_UNIT != "rpc-mountd.service") &&
          ($$record._SYSTEMD_UNIT != "rpc-statd.service") &&
          ($$record._SYSTEMD_UNIT != "rpcbind.service") &&
          ($$record._SYSTEMD_UNIT != "set-aws-environment.service") &&
          ($$record._SYSTEMD_UNIT != "system-cloudinit.service") &&
          ($$record._SYSTEMD_UNIT != "systemd-timesyncd.service") &&
          ($$record._SYSTEMD_UNIT != "update-ca-certificates.service") &&
          ($$record._SYSTEMD_UNIT != "user-cloudinit.service") &&
          ($$record._SYSTEMD_UNIT != "var-lib-etcd2.service")
processors:
  batch:
exporters:
  logging:
    loglevel: debug
  sumologic:
    endpoint: 'http:/localhost:3000'
  stats:
service:
  pipelines:
    logs:
      receivers: [filelog, journald]
      processors: [batch]
      exporters: [stats, logging]
    # metrics:...
    # traces:...